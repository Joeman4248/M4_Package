(*#line 30.10 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*)functor Target_LexFn(val getNextTokenPos : string -> {line: word, column: word})(*#line 1.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
=
   struct
    structure UserDeclarations =
      struct
(*#line 1.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*)datatype lexresult	= SHELL of string * string * {line: word, column: word};
val error 			= fn x => TextIO.output(TextIO.stdOut,x ^ "\n")
val eof 			= fn () => SHELL("","eof",getNextTokenPos(""))
(* ============================================================================================== *)
(* ------------------------------------------------------------------ *)
(* assumes that ">" does not occur as part of a nonterminal symbol *)
fun generateSchemaTokenName( yytext ) =
    let
        fun split(x, []   ) =  raise General.Fail("an_error")
          | split(x, y::ys) = if x=y then ys else split(x,ys);
                                                    
        fun splitFirst(symbol,[])    = 	[] (* symbol was not in the input list *)
          | splitFirst(symbol,x::xs) = 	if x = symbol 
                        then (* found split point *)
                            []
                        else (* keep looking      *)
                            x::splitFirst(symbol,xs);
                                                                        
        val s0   = explode(yytext);
        val s1   = split(#"<",s0);
        val s2   = splitFirst(#">",s1);  
    in
        implode(explode("!#schema_variable_") @ s2)        
    end;
    
(* ------------------------------------------------------------------ *)

(* ============================================================================================== *)
(*#line 34.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s = [ 
 (0, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (1, 
"\003\003\003\003\003\003\003\003\003\078\079\003\003\003\003\003\
\\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\
\\078\076\003\003\003\075\073\003\072\071\070\068\003\066\003\064\
\\063\061\061\061\061\061\061\061\061\061\003\060\054\052\050\003\
\\003\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\047\003\003\046\003\
\\003\043\039\009\009\035\029\009\009\025\009\009\009\009\009\009\
\\020\009\009\009\016\009\009\011\009\009\009\008\006\005\004\003\
\\003"
),
 (6, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\007\000\000\000\
\\000"
),
 (9, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (11, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\012\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (12, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\013\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (13, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\014\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (14, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\015\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (16, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\017\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (17, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\018\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (18, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\019\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (20, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\021\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (21, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\022\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (22, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\023\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (23, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\024\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (25, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\028\010\010\010\010\010\010\010\026\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (26, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\027\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (29, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\032\010\010\010\010\010\010\010\010\010\010\010\010\010\030\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (30, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\031\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (32, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\033\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (33, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\034\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (35, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\036\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (36, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\037\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (37, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\038\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (39, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\040\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (40, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\041\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (41, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\042\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (43, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\044\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (44, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\010\010\010\010\010\010\010\010\010\010\000\000\000\000\000\000\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\010\010\010\010\010\010\010\010\000\000\000\000\010\
\\000\010\010\010\010\010\010\010\010\010\010\010\010\010\010\010\
\\010\010\010\045\010\010\010\010\010\010\010\000\000\000\000\000\
\\000"
),
 (47, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\048\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (48, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\049\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (50, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\051\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (52, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\053\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (54, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\059\000\000\
\\000\055\055\055\055\055\055\055\055\055\055\055\055\055\055\055\
\\055\055\055\055\055\055\055\055\055\055\055\000\000\000\000\000\
\\000\055\055\055\055\055\055\055\055\055\055\055\055\055\055\055\
\\055\055\055\055\055\055\055\055\055\055\055\000\000\000\000\000\
\\000"
),
 (55, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\055\055\055\055\055\055\055\055\055\055\000\000\000\000\056\000\
\\000\055\055\055\055\055\055\055\055\055\055\055\055\055\055\055\
\\055\055\055\055\055\055\055\055\055\055\055\000\000\000\000\055\
\\000\055\055\055\055\055\055\055\055\055\055\055\055\055\055\055\
\\055\055\055\055\055\055\055\055\055\055\055\000\000\000\000\000\
\\000"
),
 (56, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\057\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (57, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\058\058\058\058\058\058\058\058\058\058\000\000\000\000\000\000\
\\000\058\058\058\058\058\058\058\058\058\058\058\058\058\058\058\
\\058\058\058\058\058\058\058\058\058\058\058\000\000\000\000\058\
\\000\058\058\058\058\058\058\058\058\058\058\058\058\058\058\058\
\\058\058\058\058\058\058\058\058\058\058\058\000\000\000\000\000\
\\000"
),
 (61, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\062\062\062\062\062\062\062\062\062\062\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (64, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\065\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (65, 
"\065\065\065\065\065\065\065\065\065\065\000\065\065\065\065\065\
\\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\
\\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\
\\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\
\\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\
\\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\
\\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\
\\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\
\\065"
),
 (66, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\067\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (68, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\069\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (73, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\074\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (76, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\077\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (78, 
"\000\000\000\000\000\000\000\000\000\079\079\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\079\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
(0, "")]
fun f x = x 
val s = map f (rev (tl (rev s))) 
exception LexHackingError 
fun look ((j,x)::r, i: int) = if i = j then x else look(r, i) 
  | look ([], i) = raise LexHackingError
fun g {fin=x, trans=i} = {fin=x, trans=look(s,i)} 
in Vector.fromList(map g 
[{fin = [], trans = 0},
{fin = [], trans = 1},
{fin = [], trans = 1},
{fin = [(N 130)], trans = 0},
{fin = [(N 93),(N 130)], trans = 0},
{fin = [(N 10),(N 130)], trans = 0},
{fin = [(N 130)], trans = 6},
{fin = [(N 63)], trans = 0},
{fin = [(N 8),(N 130)], trans = 0},
{fin = [(N 102),(N 130)], trans = 9},
{fin = [(N 102)], trans = 9},
{fin = [(N 102),(N 130)], trans = 11},
{fin = [(N 102)], trans = 12},
{fin = [(N 102)], trans = 13},
{fin = [(N 102)], trans = 14},
{fin = [(N 47),(N 102)], trans = 9},
{fin = [(N 102),(N 130)], trans = 16},
{fin = [(N 102)], trans = 17},
{fin = [(N 102)], trans = 18},
{fin = [(N 102),(N 116)], trans = 9},
{fin = [(N 102),(N 130)], trans = 20},
{fin = [(N 102)], trans = 21},
{fin = [(N 102)], trans = 22},
{fin = [(N 102)], trans = 23},
{fin = [(N 57),(N 102)], trans = 9},
{fin = [(N 102),(N 130)], trans = 25},
{fin = [(N 102)], trans = 26},
{fin = [(N 28),(N 102)], trans = 9},
{fin = [(N 36),(N 102)], trans = 9},
{fin = [(N 102),(N 130)], trans = 29},
{fin = [(N 102)], trans = 30},
{fin = [(N 51),(N 102)], trans = 9},
{fin = [(N 102)], trans = 32},
{fin = [(N 102)], trans = 33},
{fin = [(N 102)], trans = 18},
{fin = [(N 102),(N 130)], trans = 35},
{fin = [(N 102)], trans = 36},
{fin = [(N 102)], trans = 37},
{fin = [(N 41),(N 102)], trans = 9},
{fin = [(N 102),(N 130)], trans = 39},
{fin = [(N 102)], trans = 40},
{fin = [(N 102)], trans = 41},
{fin = [(N 33),(N 102)], trans = 9},
{fin = [(N 102),(N 130)], trans = 43},
{fin = [(N 102)], trans = 44},
{fin = [(N 99),(N 102)], trans = 9},
{fin = [(N 95),(N 130)], trans = 0},
{fin = [(N 130)], trans = 47},
{fin = [], trans = 48},
{fin = [(N 128)], trans = 0},
{fin = [(N 67),(N 130)], trans = 50},
{fin = [(N 73)], trans = 0},
{fin = [(N 18),(N 130)], trans = 52},
{fin = [(N 76)], trans = 0},
{fin = [(N 65),(N 130)], trans = 54},
{fin = [], trans = 55},
{fin = [], trans = 56},
{fin = [], trans = 57},
{fin = [(N 124)], trans = 57},
{fin = [(N 70)], trans = 0},
{fin = [(N 16),(N 130)], trans = 0},
{fin = [(N 106),(N 130)], trans = 61},
{fin = [(N 106)], trans = 61},
{fin = [(N 106),(N 130)], trans = 0},
{fin = [(N 87),(N 130)], trans = 64},
{fin = [(N 6)], trans = 65},
{fin = [(N 83),(N 130)], trans = 66},
{fin = [(N 24)], trans = 0},
{fin = [(N 81),(N 130)], trans = 68},
{fin = [(N 21)], trans = 0},
{fin = [(N 85),(N 130)], trans = 0},
{fin = [(N 14),(N 130)], trans = 0},
{fin = [(N 12),(N 130)], trans = 0},
{fin = [(N 130)], trans = 73},
{fin = [(N 60)], trans = 0},
{fin = [(N 89),(N 130)], trans = 0},
{fin = [(N 91),(N 130)], trans = 76},
{fin = [(N 79)], trans = 0},
{fin = [(N 2),(N 130)], trans = 78},
{fin = [(N 2)], trans = 78}])
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val INITIAL = STARTSTATE 1;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

structure YYPosInt : INTEGER = Int
fun makeLexer yyinput =
let	val yygone0= YYPosInt.fromInt ~1
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref yygone0	(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex () : Internal.result =
let fun continue() = lex() in
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let fun yymktext() = substring(!yyb,i0,i-i0)
			     val yypos = YYPosInt.+(YYPosInt.fromInt i0, !yygone)
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  10 => let val yytext=yymktext() in (*#line 52.10 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 670.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 102 => let val yytext=yymktext() in (*#line 84.11 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) SHELL("id" , yytext, getNextTokenPos(yytext))    (*#line 672.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 106 => let val yytext=yymktext() in (*#line 85.15 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) SHELL("integer" , yytext, getNextTokenPos(yytext))(*#line 674.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 116 => let val yytext=yymktext() in (*#line 86.15 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) SHELL("boolean" , yytext, getNextTokenPos(yytext))(*#line 676.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 12 => let val yytext=yymktext() in (*#line 53.10 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 678.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 124 => let val yytext=yymktext() in (*#line 88.35 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) SHELL(generateSchemaTokenName(yytext), yytext, getNextTokenPos(yytext))    (*#line 680.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 128 => let val yytext=yymktext() in (*#line 89.35 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) SHELL("" , yytext, getNextTokenPos(yytext))    (*#line 682.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 130 => let val yytext=yymktext() in (*#line 91.35 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) error("ignored an unprintable character: " ^ yytext); getNextTokenPos(yytext); lex()  (*#line 684.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 14 => let val yytext=yymktext() in (*#line 54.10 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 686.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 16 => let val yytext=yymktext() in (*#line 55.10 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 688.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 18 => let val yytext=yymktext() in (*#line 56.10 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 690.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 2 => let val yytext=yymktext() in (*#line 48.18 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) getNextTokenPos(yytext); lex()  (*#line 692.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 21 => let val yytext=yymktext() in (*#line 57.11 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 694.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 24 => let val yytext=yymktext() in (*#line 58.11 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 696.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 28 => let val yytext=yymktext() in (*#line 59.12 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 698.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 33 => let val yytext=yymktext() in (*#line 60.13 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 700.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 36 => let val yytext=yymktext() in (*#line 61.11 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 702.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 41 => let val yytext=yymktext() in (*#line 62.21 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 704.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 47 => let val yytext=yymktext() in (*#line 63.14 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 706.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 51 => let val yytext=yymktext() in (*#line 64.12 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 708.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 57 => let val yytext=yymktext() in (*#line 65.14 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 710.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 6 => let val yytext=yymktext() in (*#line 49.18 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) getNextTokenPos(yytext); lex()  (*#line 712.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 60 => let val yytext=yymktext() in (*#line 66.11 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 714.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 63 => let val yytext=yymktext() in (*#line 67.11 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 716.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 65 => let val yytext=yymktext() in (*#line 68.10 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 718.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 67 => let val yytext=yymktext() in (*#line 69.10 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 720.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 70 => let val yytext=yymktext() in (*#line 70.11 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 722.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 73 => let val yytext=yymktext() in (*#line 71.11 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 724.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 76 => let val yytext=yymktext() in (*#line 72.11 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 726.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 79 => let val yytext=yymktext() in (*#line 73.11 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 728.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 8 => let val yytext=yymktext() in (*#line 51.10 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 730.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 81 => let val yytext=yymktext() in (*#line 74.10 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 732.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 83 => let val yytext=yymktext() in (*#line 75.10 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 734.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 85 => let val yytext=yymktext() in (*#line 76.10 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 736.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 87 => let val yytext=yymktext() in (*#line 77.10 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 738.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 89 => let val yytext=yymktext() in (*#line 78.10 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 740.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 91 => let val yytext=yymktext() in (*#line 79.10 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 742.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 93 => let val yytext=yymktext() in (*#line 80.10 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 744.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 95 => let val yytext=yymktext() in (*#line 81.10 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 746.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 99 => let val yytext=yymktext() in (*#line 82.12 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec"*) SHELL(yytext , yytext, getNextTokenPos(yytext))  (*#line 748.1 "C:\Users\Joseph\Coding\CSCI4220\Group_Project\Milestone_04\M4_Package\Group6_m4\Transformation\bin\target_tokens.spec.sml"*)
 end
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof ()
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := substring(!yyb,i0,l-i0)^newchars;
		     yygone := YYPosInt.+(!yygone, YYPosInt.fromInt i0);
		     yybl := size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = Char.ord(CharVector.sub(!yyb,l))
		val NewChar = if NewChar<128 then NewChar else 128
		val NewState = Char.ord(CharVector.sub(trans,NewChar))
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
(*
	val start= if substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
*)
	in scan(!yybegin (* start *),nil,!yybufpos,!yybufpos)
    end
end
  in lex
  end
end
