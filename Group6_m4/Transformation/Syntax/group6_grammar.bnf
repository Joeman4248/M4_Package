USE_LR_PARSER


(*  Grammar for Group 6, Milestone 3
    Authors: Russell Brogan, Joseph Clarke, Anna Rue, Daniel Zapata *)

(* ======================================================================================================= *)

(* Statements *)

prog

<prog> ::= <stmtList> .

<stmtList> ::= <stmt> <stmtList> | .

<stmt> ::= <block>
         | <declare> ";"
         | <assign> ";"
         | <output> ";"
         | <conditional>
         | <iteration> .

<declare> ::= "int"  id
            | "bool" id .

<assign> ::= id "=" <expression> | <increment>.

<output> ::= "print" "(" <expression> ")" .

<block> ::= "{" <stmtList> "}" .

<conditional> ::= "if" "(" <expression> ")" <block>
                | "if" "(" <expression> ")" <block> "else" <block> .

<iteration> ::= "while" "(" <expression> ")" <block>
              | "for" "(" <assign> ";" <expression> ";" <assign> ")" <block> .

(* Boolean Expressions *)

<expression> ::= <disjunction> .

<disjunction> ::= <disjunction> "||" <conjunction>
                | <conjunction> .

<conjunction> ::= <conjunction> "&&" <equality>
                | <equality> .

<equality> ::= <equality> "==" <relational>
             | <equality> "!=" <relational>
             | <relational> .

<relational> ::= <relational> "<" <additive>
               | <relational> ">" <additive>
               | <relational> "<=" <additive>
               | <relational> ">=" <additive>
               | <additive> .

(* Integer Expressions *)

<additive> ::= <additive> "+" <multiplicative>
             | <additive> "-" <multiplicative>
             | <multiplicative> .

<multiplicative> ::= <multiplicative> "*" <negation>
                   | <multiplicative> "/" <negation>
                   | <multiplicative> "%" <negation>
                   | <negation> .

<negation> ::= "!" <negation>
             | "~" <negation>
             | <exponent> .

<exponent> ::= <absolute> "^" <exponent>
             | <absolute> .

<absolute> ::= "abs" "(" <expression> ")"
             | <base> .

<base> ::= id | boolean | integer
         | "(" <expression> ")" | <increment> .

<increment> ::= id "++"
              | id "--"
              | "++" id
              | "--" id .
